======================
The ``0-add_integer`` module
======================

Using ``add_integer``
-------------------

This is a text file to test the 0-add_integer module.  First import
``0-add_integer`` from the ``add_integer`` module:

>>> add_integer = __import__('0-add_integer').add_integer

Now use it with:

Positive number:
>>> add_integer(3, 4)
7

>>> add_integer(1, 0)
1

>>> add_integer(0, 1)
1

>>> add_integer(0, 0)
0

>>> add_integer(9999999999, 1)
10000000000

>>> add_integer(10e1000, 10)
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer

>>> add_integer(10e-1000)
98

>>> add_integer(2)
100

>>> add_integer(0)
98

>>> add_integer(1.1)
99

>>> add_integer(1.5)
99

>>> add_integer(1.8)
99

>>> add_integer(1.9)
99

Negative number:
 
>>> add_integer(-3, -4)
-7

>>> add_integer(-1, 0)
-1

>>> add_integer(0, -1)
-1

>>> add_integer(-9999999999, -1)
-10000000000

>>> add_integer(-10e1000, 10)
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer

>>> add_integer(-10e-1000, 10)
10

>>> add_integer(-2)
96

Tracebacks

>>> add_integer()
Traceback (most recent call last):
TypeError: add_integer() missing 1 required positional argument: 'a'

>>> add_integer('c')
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer('c', 1)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(1, 'c')
Traceback (most recent call last):
TypeError: b must be an integer

>>> add_integer('c', 'd')
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer("Art")
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer([1, 2, 3])
Traceback (most recent call last):
TypeError: a must be an integer


>>> add_integer(float("NaN"))
Traceback (most recent call last):
ValueError: cannot convert float NaN to integer
